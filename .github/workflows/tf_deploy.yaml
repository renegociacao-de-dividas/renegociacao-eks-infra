name: Terraform AWS Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Terraform
    environment: production
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: renegociacao-dividas
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws_region: ca-central-1

      - name: Terraform init
        run: terraform init

      - name: Terraform plan
        run: terraform plan

      - name: Terraform apply
        run: terraform apply -auto-approve

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
      - name: Apply metrics-server and AWS Secrets provider
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          kubectl apply -f https://raw.githubusercontent.com/aws/secrets-store-csi-driver-provider-aws/main/deployment/aws-provider-installer.yaml
      - name: Add Helm repo for Secrets Store CSI Driver
        run: |
          helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts || true
          helm repo update
      - name: Install AWS Secrets Manager provider
        run: |
          if ! helm list -n kube-system | grep -q 'csi-secrets-store'; then
            helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver --set syncSecret.enabled=true --namespace kube-system
          fi
      - name: Ensure AWS Load Balancer Controller IAM policy exists
        run: |
          if ! aws iam list-policies --query 'Policies[?PolicyName==`AWSLoadBalancerControllerIAMPolicy`].PolicyName' --output text | grep -q 'AWSLoadBalancerControllerIAMPolicy'; then
            curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json
            aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json
          fi

      - name: Install or upgrade AWS Load Balancer Controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update

          # Criar a ServiceAccount se ela ainda n√£o existir
          kubectl create serviceaccount aws-load-balancer-controller \
            -n kube-system || echo "ServiceAccount already exists"

          # Instalar ou fazer upgrade do AWS Load Balancer Controller usando Helm
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            --namespace kube-system \
            --set clusterName=$EKS_CLUSTER_NAME \
            --set serviceAccount.create=false \
            --set aws-vpc-id=vpc-03384bddf29ad7137 \
            --set region=$AWS_REGION \
            --set vpcId=vpc-03384bddf29ad7137 \
            --set aws.region=$AWS_REGION \
            --set serviceAccount.name=aws-load-balancer-controller
            
      - name: Annotate ServiceAccount for AWS Load Balancer Controller
        run: |
          kubectl annotate serviceaccount aws-load-balancer-controller \
            -n kube-system \
            eks.amazonaws.com/role-arn=arn:aws:iam::$AWS_ACCOUNT_ID:role/AmazonEKSLoadBalancerControllerRole --overwrite
      
      - name: Aplicar Ingress e IRSA
        run: kubectl apply -f ingress-controller.yaml && kubectl apply -f irsa.yaml
